S·ª≠ d·ª•ng  LinQ cho c√°c Collection ( IEnumerable<T>)  hay   Queryable<T> (truy v·∫•n database qua EF Core) 

gi·∫£i th√≠ch    IEnumerable<T>  v√†   Queryable<T>  v√†  LINQ  : 

LINQ  :  gi·ªëng nh∆∞ vi·∫øt SQL nh∆∞ng v·ªõi c√∫ ph√°p c·ªßa C#. v√† c√≥ th·ªÉ k·∫øt h·ª£p v·ªõi ƒëi·ªÅu ki·ªán  lamda  v√≠   list <int >   contain  = {2,3,2,4}; IEnumerable<int> =  contain.FirstOrDefault (n =>n>2)   

IEnumerable<T> üëâ   t·∫≠p h·ª£p ch·ª©a c√°c ph·∫ßn t·ª≠ T th·∫≠t s·ª± trong b·ªô nh·ªõ.Th∆∞·ªùng d√πng khi d·ªØ li·ªáu ƒë√£ n·∫±m trong b·ªô nh·ªõ (RAM) .L·ªçc, s·∫Øp x·∫øp, t√≠nh to√°n‚Ä¶ ƒë·ªÅu l√†m sau khi data ƒë∆∞·ª£c load v·ªÅ RAM. =>     Load  ·ªü  Ram 

IQueryable<T> üëâ    bi·ªÉu di·ªÖn t·∫≠p h·ª£p c√°c ph·∫ßn t·ª≠ T, nh∆∞ng kh√¥ng l∆∞u d·ªØ li·ªáu th·ª±c t·∫ø.Th∆∞·ªùng d√πng khi d·ªØ li·ªáu n·∫±m trong database (qua DbSet<T> trong Entity Framework)  ,

C√°c c√¢u l·ªánh LINQ (Where, Select, Count, ‚Ä¶) ƒë∆∞·ª£c d·ªãch sang SQL v√† ch·∫°y tr·ª±c ti·∫øp tr√™n Database   => Load  ·ªü  Database   v√†  n√≥ th√™m Async v√†o truy v·∫•n LINQ  



=>  Collection ( IEnumerable<T>)  k·∫øt h·ª£p v·ªõi  [ select , where,SkipWhile,.....]   ki·ªÉu d·ªØ li·ªáu tr·∫£ v·ªÉ  IEnumerable<T>
=>     Queryable<T>   k·∫øt h·ª£p v·ªõi [ select , where,SkipWhile ,....] ki·ªÉu d·ªØ li·ªáu tr·∫£ v·ªÅ   Queryable<T>  

=>   T generic  ki·ªÉu d·ªØ li·ªÉu t·ªïng qu√°t  

 
V√≠ d·ª• :      

  List<int> numbers = new List<int> { 1, 2, 3, 5,10 };

  int result = numbers.FirstOrDefault(n => n > 1);
   
*** √Ω  nghƒ©a Lambda = ƒëi·ªÅu ki·ªán / c√¥ng th·ª©c x·ª≠ l√Ω m√† LINQ d√πng cho t·ª´ng ph·∫ßn t·ª≠.
  
n·∫øu  duy·ªát h·∫øt m√†  kh√¥ng th·ªèa m√£n ƒëi·ªÅu ki·ªán th√¨  tr·∫£ v·ªÅ  N·∫øu kh√¥ng c√≥ ph·∫ßn t·ª≠ n√†o th√¨ tr·∫£ v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh (default).
‚Ä¢	V·ªõi ki·ªÉu tham chi·∫øu (class, object) ‚Üí null.
‚Ä¢	V·ªõi ki·ªÉu s·ªë (int, double, ‚Ä¶) ‚Üí 0.
‚Ä¢	V·ªõi bool ‚Üí false.




Ph∆∞∆°ng th·ª©c	V√≠ d·ª•	K·∫øt qu·∫£  ...  
Where()	numbers.Where(n => n > 1)	L·ªçc c√°c s·ªë > 1
Count()	numbers.Count(n => n > 1)	ƒê·∫øm s·ªë l∆∞·ª£ng s·ªë > 1
Any()	numbers.Any(n => n > 1)	Ki·ªÉm tra c√≥ s·ªë n√†o > 1 kh√¥ng  return  (bool)
All()	numbers.All(n => n > 1)	Ki·ªÉm tra t·∫•t c·∫£ s·ªë > 1 kh√¥ng return  (bool)
First()	numbers.First(n => n > 1)   ||   numbers.FirstOrDefaul(n => n > 1)   L·∫•y s·ªë ƒë·∫ßu ti√™n > 1 
Select()numbers.Select(n => n * 2)	Bi·∫øn ƒë·ªïi m·ªói s·ªë (nh√¢n ƒë√¥i)

Sum()	                           numbers.Sum(n => n)	T·ªïng c√°c gi√° tr·ªã
Average()	                   numbers.Average(n => n)	Trung b√¨nh c·ªông theo n
OrderBy()	                   numbers.OrderBy(n => n)	S·∫Øp x·∫øp tƒÉng d·∫ßn theo  n
OrderByDescending()	           numbers.OrderByDescending(n => n)	S·∫Øp x·∫øp gi·∫£m d·∫ßn theo n
 
  

  
Recap  :   IEnumerable<T>  v√†   Queryable<T>   C√≥ th·ªÉ  s·ª≠ d·ª•ng l·ªánh truy v·∫´n LinQ v√†  ƒë·ªïi l·∫°i th√†nh List  nh·ªù  TOLIST


   
     
 






































