S·ª≠ d·ª•ng  LinQ cho c√°c Collection ( IEnumerable<T>)  hay   Queryable<T> (truy v·∫•n database qua EF Core) 

gi·∫£i th√≠ch    IEnumerable<T>  v√†   Queryable<T>    : 


IEnumerable<T> üëâ th∆∞·ªùng d√πng khi d·ªØ li·ªáu ƒë√£ n·∫±m trong b·ªô nh·ªõ (RAM), v√≠ d·ª•: List, Array, HashSet‚Ä¶ ho·∫∑c khi b·∫°n ƒë√£ .ToList() / .ToArray() t·ª´ database r·ªìi.

L·ªçc, s·∫Øp x·∫øp, t√≠nh to√°n‚Ä¶ ƒë·ªÅu l√†m sau khi data ƒë∆∞·ª£c load v·ªÅ RAM. =>   l·ªçc ·ªü Ram

IQueryable<T> üëâ th∆∞·ªùng d√πng khi d·ªØ li·ªáu n·∫±m trong database (qua DbSet<T> trong Entity Framework).

C√°c c√¢u l·ªánh LINQ (Where, Select, Count, ‚Ä¶) ƒë∆∞·ª£c d·ªãch sang SQL v√† ch·∫°y tr·ª±c ti·∫øp tr√™n Database   => l·ªçc ·ªü database 

=>  Collection ( IEnumerable<T>)  k·∫øt h·ª£p v·ªõi  [ select , where]   ki·ªÉu d·ªØ li·ªáu tr·∫£ v·ªÉ  IEnumerable<T>
=>     Queryable<T>   k·∫øt h·ª£p v·ªõi [ select , where] ki·ªÉu d·ªØ li·ªáu tr·∫£ v·ªÅ   Queryable<T>  

=>   T generic  ki·ªÉu d·ªØ li·ªÉu t·ªïng qu√°t  

 
V√≠ d·ª• :      

  List<int> numbers = new List<int> { 1, 2, 3, 5,10 };

  int result = numbers.FirstOrDefault(n => n > 1);
   
√Ω  nghƒ©a  :  
 Duy·ªát qua t·ª´ng ph·∫ßn t·ª≠ trong Collection n s·∫Ω ƒë·∫°i di·ªán cho t·ª´ng ph·∫ßn t·ª≠ trong Collection r·ªìi g√°n l·∫°i n  so s√°nh  v·ªõi ƒëi·ªÅu ki·ªán  n·∫øu h·ª£p  l·ªá  th√¨  s·∫Ω break;
  
n·∫øu  duy·ªát h·∫øt m√†  kh√¥ng th·ªèa m√£n ƒëi·ªÅu ki·ªán th√¨  tr·∫£ v·ªÅ  N·∫øu kh√¥ng c√≥ ph·∫ßn t·ª≠ n√†o th√¨ tr·∫£ v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh (default).
‚Ä¢	V·ªõi ki·ªÉu tham chi·∫øu (class, object) ‚Üí null.
‚Ä¢	V·ªõi ki·ªÉu s·ªë (int, double, ‚Ä¶) ‚Üí 0.
‚Ä¢	V·ªõi bool ‚Üí false.




Ph∆∞∆°ng th·ª©c	V√≠ d·ª•	K·∫øt qu·∫£
Where()	numbers.Where(n => n > 1)	L·ªçc c√°c s·ªë > 1
Count()	numbers.Count(n => n > 1)	ƒê·∫øm s·ªë l∆∞·ª£ng s·ªë > 1
Any()	numbers.Any(n => n > 1)	Ki·ªÉm tra c√≥ s·ªë n√†o > 1 kh√¥ng  return  (bool)
All()	numbers.All(n => n > 1)	Ki·ªÉm tra t·∫•t c·∫£ s·ªë > 1 kh√¥ng return  (bool)
First()	numbers.First(n => n > 1)	L·∫•y s·ªë ƒë·∫ßu ti√™n > 1
Select()numbers.Select(n => n * 2)	Bi·∫øn ƒë·ªïi m·ªói s·ªë (nh√¢n ƒë√¥i)



  
  

  

     
 




