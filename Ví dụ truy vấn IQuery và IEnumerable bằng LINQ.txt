 

 1.  IQueryable<T>

üìã B·∫£ng d·ªØ li·ªáu: Items
ItemId	Name	Category	Price
1	B√∫t	VƒÉn ph√≤ng	500
2	V·ªü	VƒÉn ph√≤ng	2000
3	Th∆∞·ªõc	VƒÉn ph√≤ng	1500
4	√Åo	Th·ªùi trang	3000
5	Qu·∫ßn	Th·ªùi trang	4000
6	M≈©	Th·ªùi trang	800
7	Gi√†y	Th·ªùi trang	2500
üìå Y√™u c·∫ßu:

L·∫•y c√°c nh√≥m Category c√≥ gi√° > 1000 (l·ªçc b·∫£n ghi tr∆∞·ªõc).

Gom nh√≥m theo Category.

Ch·ªâ l·∫•y nh√≥m c√≥ t·ª´ 2 s·∫£n ph·∫©m tr·ªü l√™n (l·ªçc nh√≥m sau).

Xu·∫•t Category + s·ªë l∆∞·ª£ng s·∫£n ph·∫©m.

üîπ SQL
SELECT Category, COUNT(*) AS SoLuong
FROM Items
WHERE Price > 1000              -- L·ªçc b·∫£n ghi (WHERE)
GROUP BY Category                -- Gom nh√≥m
HAVING COUNT(*) >= 2             -- L·ªçc nh√≥m (HAVING)
ORDER BY SoLuong DESC;           -- S·∫Øp x·∫øp

üîπ LINQ Method Syntax
var query = Items
    .Where(item => item.Price > 1000)              // WHERE
    .GroupBy(item => item.Category)                // GROUP BY
    .Where(g => g.Count() >= 2)                    // HAVING
    .OrderByDescending(g => g.Count())             // ORDER BY
    .Select(g => new { Category = g.Key, Count = g.Count() }); // SELECT l·∫•y  ra  nh·ªØng c·ªôt m√¨nh  mu·ªën v√† t·∫°o th√†nh Object m·ªõi 

üìä Th·ª±c hi·ªán t·ª´ng b∆∞·ªõc
B∆∞·ªõc 1: WHERE Price > 1000
ItemId	Name	Category	Price
2	V·ªü	VƒÉn ph√≤ng	2000
3	Th∆∞·ªõc	VƒÉn ph√≤ng	1500
4	√Åo	Th·ªùi trang	3000
5	Qu·∫ßn	Th·ªùi trang	4000
7	Gi√†y	Th·ªùi trang	2500
B∆∞·ªõc 2: GROUP BY Category

VƒÉn ph√≤ng ‚Üí {V·ªü, Th∆∞·ªõc}

Th·ªùi trang ‚Üí {√Åo, Qu·∫ßn, Gi√†y}

B∆∞·ªõc 3: HAVING COUNT >= 2
Category	Count
VƒÉn ph√≤ng	2
Th·ªùi trang	3
B∆∞·ªõc 4: ORDER BY Count DESC
Category	Count
Th·ªùi trang	3
VƒÉn ph√≤ng	2


‚úÖ K·∫øt qu·∫£ cu·ªëi c√πng gi·ªëng nhau ·ªü SQL v√† LINQ.



2.  IEnumerable<T> 


List<Item> collection = new List<Item> {
    new Item { Name = "B√∫t", Category = "VƒÉn ph√≤ng", Price = 500 },
    new Item { Name = "√Åo", Category = "Th·ªùi trang", Price = 3000 }
};



collection
    .Join(otherCollection, ...)              
    .Where(item => item.Price > 1000)        
    .GroupBy(item => item.Category)          
    .Where(g => g.Count() > 2)               
    .OrderByDescending(g => g.Key)           
    .Select(g => new { Category = g.Key, Count = g.Count() }) SELECT l·∫•y  ra  nh·ªØng c·ªôt m√¨nh  mu·ªën v√† t·∫°o th√†nh Object m·ªõi 

    .Take(10);











